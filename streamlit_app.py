import streamlit as st
import numpy as np
from PIL import Image
import requests
import io
import matplotlib.pyplot as plt

# URL API
API_URL = "https://nein.onrender.com/predict"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Image Classifier",
                   layout="centered", page_icon="üì∏")

# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
st.markdown("""
    <style>
    .main {
        background-color: #1e1e1e;
        padding: 20px;
        border-radius: 10px;
        color: white;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: bold;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .stFileUploader {
        background-color: #2e2e2e;
        border-radius: 10px;
        padding: 10px;
    }
    .stImage {
        border: 2px solid #4CAF50;
        border-radius: 10px;
    }
    .stSpinner {
        color: #4CAF50;
    }
    h1, h2, h3 {
        color: #4CAF50;
    }
    .success-box {
        background-color: #2e7d32;
        padding: 10px;
        border-radius: 8px;
        color: white;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∂–∏–≤–æ—Ç–Ω—ã—Ö")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üêîüêòüêé –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ –Ω—ë–º!")

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
with st.container():
    st.markdown("### –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PNG, JPG –∏–ª–∏ JPEG", type=[
                                     "png", "jpg", "jpeg"], key="uploader")
    image = None
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ
        col1, col2 = st.columns([2, 1])
        with col1:
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                     use_container_width=True)
        with col2:
            st.markdown("#### –ì–æ—Ç–æ–≤–æ –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏!")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ API
if image is not None:
    st.markdown("### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    image = image.resize((128, 128))
    buffered = io.BytesIO()
    image.save(buffered, format="PNG")
    img_bytes = buffered.getvalue()

    if st.button("üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("üïí –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
            files = {"file": ("image.png", img_bytes, "image/png")}
            try:
                response = requests.post(API_URL, files=files)
                if response.ok:
                    result = response.json()
                    pred_class = result["predicted_class"]
                    probabilities = result["probabilities"]

                    # Emoji –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
                    class_emoji = {"chicken": "üêî", "slon": "üêò", "horse": "üêé"}
                    st.markdown(
                        f"<div class='success-box'>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {class_emoji.get(pred_class, '‚ùì')} <b>{pred_class}</b></div>", unsafe_allow_html=True)

                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                    st.markdown("### üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤")
                    labels = list(probabilities.keys())
                    values = list(probabilities.values())
                    # –¶–≤–µ—Ç–∞ –¥–ª—è chicken, slon, horse
                    colors = ["#FF6F61", "#6B5B95", "#88B04B"]

                    fig, ax = plt.subplots(figsize=(6, 3))
                    bars = ax.barh(labels, values, color=colors)
                    ax.set_xlabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
                    ax.set_xlim(0, 1)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
                    for bar, value in zip(bars, values):
                        ax.text(value, bar.get_y() + bar.get_height()/2, f"{value:.2%}",
                                va="center", ha="left", color="white", fontweight="bold")
                    plt.tight_layout()
                    st.pyplot(fig)
                else:
                    st.error(
                        f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            except requests.exceptions.RequestException as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
